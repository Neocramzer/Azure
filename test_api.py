#!/usr/bin/env python3
"""
Script de test pour valider le bon fonctionnement des deux mod√®les
Usage: python test_api.py
"""

import requests
import json
import sys
import time

API_BASE_URL = "http://localhost:8080"

def test_server_health():
    """Test si le serveur r√©pond"""
    try:
        response = requests.get(f"{API_BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Serveur accessible")
            return True
        else:
            print(f"‚ùå Serveur non accessible (status: {response.status_code})")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur")
        print("   V√©rifiez que le container Docker est en cours d'ex√©cution sur le port 8080")
        return False

def test_models_info():
    """Test de l'endpoint d'informations sur les mod√®les"""
    try:
        response = requests.get(f"{API_BASE_URL}/models/info")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Endpoint /models/info fonctionne")
            print(f"   Mod√®les disponibles: {', '.join(data['models'].keys())}")
            return True
        else:
            print(f"‚ùå Erreur /models/info (status: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test /models/info: {e}")
        return False

def test_aqi_prediction():
    """Test de l'endpoint de pr√©diction AQI"""
    # Donn√©es de test r√©alistes
    test_data = {
        "co": 1.2,
        "no": 15.5,
        "no2": 25.3,
        "o3": 45.2,
        "so2": 8.1,
        "pm2_5": 35.7,
        "pm10": 55.2,
        "nh3": 12.4
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict-aqi",
            headers={"Content-Type": "application/json"},
            json=test_data
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Pr√©diction AQI fonctionne")
            print(f"   AQI pr√©dit: {data['predicted_aqi']}")
            print(f"   Cat√©gorie: {data['aqi_category']}")
            if 'confidence' in data and data['confidence']:
                print(f"   Confiance: {data['confidence']:.2%}")
            return True
        else:
            print(f"‚ùå Erreur pr√©diction AQI (status: {response.status_code})")
            try:
                error_data = response.json()
                print(f"   D√©tails: {error_data}")
            except:
                print(f"   R√©ponse: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test AQI: {e}")
        return False

def test_aqi_validation():
    """Test de la validation des donn√©es AQI"""
    # Test avec donn√©es manquantes
    invalid_data = {
        "co": 1.2,
        "no": 15.5
        # Donn√©es manquantes volontairement
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict-aqi",
            headers={"Content-Type": "application/json"},
            json=invalid_data
        )
        
        if response.status_code == 400:
            print("‚úÖ Validation des donn√©es fonctionne (rejet donn√©es invalides)")
            return True
        else:
            print(f"‚ùå Validation √©choue - devrait rejeter les donn√©es invalides")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test de validation: {e}")
        return False

def test_image_endpoint():
    """Test basique de l'endpoint image (sans fichier r√©el)"""
    try:
        # Test avec donn√©es vides pour v√©rifier que l'endpoint existe
        response = requests.post(f"{API_BASE_URL}/image")
        
        # On s'attend √† une erreur mais pas une 404
        if response.status_code != 404:
            print("‚úÖ Endpoint /image existe et r√©pond")
            return True
        else:
            print("‚ùå Endpoint /image non trouv√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test image: {e}")
        return False

def run_all_tests():
    """Lance tous les tests"""
    print("üîç Test du syst√®me dual de pr√©diction AQI")
    print("=" * 50)
    
    tests = [
        ("Sant√© du serveur", test_server_health),
        ("Informations mod√®les", test_models_info),
        ("Pr√©diction AQI", test_aqi_prediction),
        ("Validation AQI", test_aqi_validation),
        ("Endpoint Images", test_image_endpoint)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã Test: {test_name}")
        result = test_func()
        results.append((test_name, result))
        time.sleep(0.5)  # Pause entre les tests
    
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "PASS" if result else "FAIL"
        emoji = "‚úÖ" if result else "‚ùå"
        print(f"{emoji} {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà R√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me est op√©rationnel.")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)